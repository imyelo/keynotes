{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"9dd24c21-63ac-51d2-90b2-ca95f91ab10b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Design a neat \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<Form />\")), mdx(\"hr\", null), mdx(SearchPreviewer, {\n    name: \"search-2-4\",\n    mdxType: \"SearchPreviewer\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4ECE\\u4E00\\u4E2A\\u641C\\u7D22\\u6846\\u8BF4\\u8D77\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u652F\\u6301\\u7528\\u7EAF\\u6570\\u503C\\u7684\\u7528\\u6237 AppID \\u6216 cls- \\u5F00\\u5934\\u7684\\u96C6\\u7FA4 ID \\u641C\\u7D22\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"file=\\\"./src/snippets/search-1-1.html\\\" title=\\\"Vanilla HTML + JS\\\"\",\n    \"file\": \"\\\"./src/snippets/search-1-1.html\\\"\",\n    \"title\": \"\\\"Vanilla\",\n    \"HTML\": true,\n    \"+\": true,\n    \"JS\\\"\": true\n  }, \"<form id=\\\"form\\\">\\n  <input name=\\\"keyword\\\" placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n</form>\\n\\n<script>\\ndocument.getElementById('form').addEventListener('submit', event => {\\n  event.preventDefault()\\n  const form = new FormData(event.currentTarget)\\n  // ... do request with `form.get('keyword')`\\n})\\n</script>\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-1.jsx\\\" title=\\\"How about React\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-1.jsx\\\"\",\n    \"title\": \"\\\"How\",\n    \"about\": true,\n    \"React\\\"\": true\n  }, \"import React from 'react'\\nimport fromPairs from 'lodash/fromPairs'\\n\\nconst Search = ({ onSearch }) => {\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    const data = new FormData(e.currentTarget)\\n    onSearch(fromPairs([...data.entries()]))\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input name=\\\"keyword\\\" placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-2.jsx\\\" title=\\\"Controlled Components\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-2.jsx\\\"\",\n    \"title\": \"\\\"Controlled\",\n    \"Components\\\"\": true\n  }, \"import React from 'react'\\n\\nconst Search = ({ onSearch }) => {\\n  const [keyword, setKeyword] = React.useState('')\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    onSearch({ keyword })\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={keyword} onChange={e => setKeyword(e.target.value)} placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-3.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-3.jsx\\\"\"\n  }, \"import React from 'react'\\n\\nconst normalize = v => v.trim()\\n\\nconst Search = ({ onSearch }) => {\\n  const [keyword, setKeyword] = React.useState('')\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    onSearch({ keyword })\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={keyword} onChange={e => setKeyword(normalize(e.target.value))} placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-4.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-4.jsx\\\"\"\n  }, \"import React from 'react'\\n\\nconst normalize = v => v.trim()\\n\\n/**\\u8BC6\\u522B\\u8F93\\u5165\\u7684\\u5B57\\u7B26\\u4E32\\u4E3A AppID \\u6216\\u96C6\\u7FA4 ID */\\nconst validateKeyword = (value) => {\\n  if (!value) {\\n    throw new Error('\\u8BF7\\u8F93\\u5165\\u5173\\u952E\\u8BCD')\\n  }\\n  if (!value || /^(\\\\d+$|cls-)/.test(value)) {\\n    return true\\n  }\\n  throw new Error('\\u8F93\\u5165\\u6709\\u8BEF\\uFF0C\\u8BF7\\u8F93\\u5165\\u4EE5 cls- \\u5F00\\u5934\\u7684\\u96C6\\u7FA4 ID \\u6216\\u6570\\u5B57\\u7C7B\\u578B\\u7684 AppID')\\n}\\n\\nconst Search = ({ onSearch }) => {\\n  const [keyword, setKeyword] = React.useState('')\\n  const [keywordError, setKeywordError] = React.useState(null)\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    try {\\n      validateKeyword(keyword)\\n    } catch (error) {\\n      setKeywordError(error)\\n      return\\n    }\\n    setKeywordError(null)\\n    onSearch({ keyword })\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={keyword} onChange={e => setKeyword(normalize(e.target.value))} placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n      {keywordError ? <p className=\\\"error\\\">{keywordError.message}</p> : null}\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-5.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-5.jsx\\\"\"\n  }, \"import React from 'react'\\n\\nconst normalize = v => v.trim()\\n\\n/**\\u8BC6\\u522B\\u8F93\\u5165\\u7684\\u5B57\\u7B26\\u4E32\\u4E3A AppID \\u6216\\u96C6\\u7FA4 ID */\\nconst validateKeyword = (value) => Promise.resolve().then(() => {\\n  if (!value) {\\n    throw new Error('\\u8BF7\\u8F93\\u5165\\u5173\\u952E\\u8BCD')\\n  }\\n  if (!value || /^(\\\\d+$|cls-)/.test(value)) {\\n    return\\n  }\\n  throw new Error('\\u8F93\\u5165\\u6709\\u8BEF\\uFF0C\\u8BF7\\u8F93\\u5165\\u4EE5 cls- \\u5F00\\u5934\\u7684\\u96C6\\u7FA4 ID \\u6216\\u6570\\u5B57\\u7C7B\\u578B\\u7684 AppID')\\n})\\n\\nconst Search = ({ onSearch }) => {\\n  const [keyword, setKeyword] = React.useState('')\\n  const [keywordError, setKeywordError] = React.useState(null)\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    validateKeyword(keyword)\\n      .then(() => {\\n        setKeywordError(null)\\n        onSearch({ keyword })\\n      }, (error) => {\\n        setKeywordError(error)\\n      })\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={keyword} onChange={e => setKeyword(normalize(e.target.value))} placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n      {keywordError ? <p className=\\\"error\\\">{keywordError.message}</p> : null}\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-2-5.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/search-2-5.jsx\\\"\"\n  }, \"import React from 'react'\\n\\nconst normalize = v => v.trim()\\n\\n/**\\u8BC6\\u522B\\u8F93\\u5165\\u7684\\u5B57\\u7B26\\u4E32\\u4E3A AppID \\u6216\\u96C6\\u7FA4 ID */\\nconst validateKeyword = (value) => Promise.resolve().then(() => {\\n  if (!value) {\\n    throw new Error('\\u8BF7\\u8F93\\u5165\\u5173\\u952E\\u8BCD')\\n  }\\n  if (!value || /^(\\\\d+$|cls-)/.test(value)) {\\n    return\\n  }\\n  throw new Error('\\u8F93\\u5165\\u6709\\u8BEF\\uFF0C\\u8BF7\\u8F93\\u5165\\u4EE5 cls- \\u5F00\\u5934\\u7684\\u96C6\\u7FA4 ID \\u6216\\u6570\\u5B57\\u7C7B\\u578B\\u7684 AppID')\\n})\\n\\nconst Search = ({ onSearch }) => {\\n  const [keyword, setKeyword] = React.useState('')\\n  const [keywordError, setKeywordError] = React.useState(null)\\n  const handleSubmit = (e) => {\\n    e.preventDefault()\\n    validateKeyword(keyword)\\n      .then(() => {\\n        setKeywordError(null)\\n        onSearch({ keyword })\\n      }, (error) => {\\n        setKeywordError(error)\\n      })\\n  }\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={keyword} onChange={e => setKeyword(normalize(e.target.value))} placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n      {keywordError ? <p className=\\\"error\\\">{keywordError.message}</p> : null}\\n    </form>\\n  )\\n}\\n\\nexport default Search\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"1. \\u57FA\\u672C\\u7684 Uncontrolled Components 2. \\u5F53\\u9700\\u8981\\u4E1A\\u52A1\\u903B\\u8F91\\u65F6\\uFF0C\\u5F80\\u5F80\\u9700\\u8981\\u5C06\\u7EC4\\u4EF6\\u8F6C\\u6362\\u4E3A Controlled Components 3. \\u4F8B\\u5982\\u5BF9\\u8F93\\u5165\\u5185\\u5BB9\\u8FDB\\u884C\\u8F6C\\u6362 4. \\u4F8B\\u5982\\u5BF9\\u8F93\\u5165\\u5185\\u5BB9\\u8FDB\\u884C\\u6821\\u9A8C 5. \\u4E3A\\u4E86\\u628A\\u5F02\\u5E38\\u5904\\u7406\\u5199\\u5F97\\u66F4\\u6E05\\u6670\\uFF0C\\u540C\\u65F6\\u4E5F\\u4E3A\\u4E86\\u80FD\\u6269\\u5C55\\u4E3A\\u5F02\\u6B65\\u6821\\u9A8C\\uFF0C\\u5C06\\u6821\\u9A8C\\u5668\\u63A5\\u53E3\\u7EA6\\u5B9A\\u4E3A promise\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Think about Reuse\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Two-way data binding\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"v-model\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"A Most Minimalist Controlled Components\\\"\",\n    \"title\": \"\\\"A\",\n    \"Most\": true,\n    \"Minimalist\": true,\n    \"Controlled\": true,\n    \"Components\\\"\": true\n  }, \"const [value, setValue] = useState('')\\n\\nreturn <input value={value} onChange={e => setValue(e.target.value)} />\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"\\u4E00\\u4E2A\\u6700\\u7B80\\u5355\\u7684 Controlled Component\\uFF0C\\u9700\\u8981\\u91CD\\u590D\\u5730\\u5199 value, onChange \\u6709\\u6CA1\\u6709\\u529E\\u6CD5\\u53EF\\u4EE5\\u81EA\\u52A8\\u6CE8\\u5165\\u5C5E\\u6027\"), mdx(\"hr\", null), mdx(\"h2\", null, \"cloneElement\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-1-1.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-1-1.jsx\\\"\"\n  }, \"import React, { useState } from 'react'\\n\\nexport default ({ onSubmit }) => {\\n  const [value, setValue] = useState('')\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      value,\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input value={value} onChange={(e) => setValue(e.target.value)} />\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-1-2.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-1-2.jsx\\\"\"\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const state = useState('')\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      value: state[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={state}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"Before\\\"\",\n    \"title\": \"\\\"Before\\\"\"\n  }, \"const [value, setValue] = useState('')\\n\\nreturn <input value={value} onChange={e => setValue(e.target.value)} />\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"After\\\"\",\n    \"title\": \"\\\"After\\\"\"\n  }, \"const state = useState('')\\n\\nreturn <Field state={state}>\\n  <input />\\n</Field>\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"\\u5BF9\\u6BD4\\u4E00\\u4E0B\\u590D\\u7528\\u903B\\u8F91\\u540E\\u7684\\u6548\\u679C\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(DefaultPreviewer, {\n    name: \"field-1-2\",\n    mdxType: \"DefaultPreviewer\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-1-2.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-1-2.jsx\\\"\"\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const state = useState('')\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      value: state[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={state}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"\\u6D4B\\u8BD5\\u4E00\\u4E0B\\u6548\\u679C\"), mdx(\"hr\", null), mdx(\"h2\", null, \"What if more fields\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-1-2.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-1-2.jsx\\\"\"\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const state = useState('')\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      value: state[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={state}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-1.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-1.jsx\\\"\"\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const username = useState('')\\n  const password = useState('')\\n  const captcha = useState('')\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      username: username[0],\\n      password: password[0],\\n      captcha: captcha[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={username}>\\n        <input />\\n      </Field>\\n      <Field state={password}>\\n        <input />\\n      </Field>\\n      <Field state={captcha}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\"\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"1. \\u73B0\\u5728\\u7684\\u7248\\u672C 2. \\u589E\\u52A0\\u5230\\u4E09\\u4E2A\\u8F93\\u5165\\u6846\\u540E 3. \\u5C06\\u5404\\u8F93\\u5165\\u6846\\u7684 state \\u653E\\u5728\\u540C\\u4E00\\u4E2A\\u5BF9\\u8C61\\u4E2D\\uFF0C\\u7136\\u540E\\u6539\\u7528 useReducer \\u7BA1\\u7406\\u72B6\\u6001\\uFF0C\\u4E0B\\u4E00\\u9875\\u8FDB\\u884C\\u8BE6\\u7EC6\\u5BF9\\u6BD4\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-1.jsx\\\" 9:20\",\n    \"file\": \"\\\"./src/snippets/field-2-1.jsx\\\"\",\n    \"9:20\": true\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const username = useState('')\\n  const password = useState('')\\n  const captcha = useState('')\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      username: username[0],\\n      password: password[0],\\n      captcha: captcha[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={username}>\\n        <input />\\n      </Field>\\n      <Field state={password}>\\n        <input />\\n      </Field>\\n      <Field state={captcha}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\" 17:34\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"17:34\": true\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-1.jsx\\\" 3:6\",\n    \"file\": \"\\\"./src/snippets/field-2-1.jsx\\\"\",\n    \"3:6\": true\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const username = useState('')\\n  const password = useState('')\\n  const captcha = useState('')\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      username: username[0],\\n      password: password[0],\\n      captcha: captcha[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={username}>\\n        <input />\\n      </Field>\\n      <Field state={password}>\\n        <input />\\n      </Field>\\n      <Field state={captcha}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\" 7:14\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"7:14\": true\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-1.jsx\\\" 24:32\",\n    \"file\": \"\\\"./src/snippets/field-2-1.jsx\\\"\",\n    \"24:32\": true\n  }, \"import React, { useState } from 'react'\\n\\nconst Field = ({ state, children }) => React.cloneElement(children, {\\n  value: state[0],\\n  onChange: (e) => state[1](e.target.value)\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const username = useState('')\\n  const password = useState('')\\n  const captcha = useState('')\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit({\\n      username: username[0],\\n      password: password[0],\\n      captcha: captcha[0],\\n    })\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field state={username}>\\n        <input />\\n      </Field>\\n      <Field state={password}>\\n        <input />\\n      </Field>\\n      <Field state={captcha}>\\n        <input />\\n      </Field>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\" 38:46\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"38:46\": true\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"1. \\u5728\\u4E1A\\u52A1\\u7EC4\\u4EF6\\u4E2D\\uFF0C\\u5C06\\u5404\\u4E2A useState \\u5408\\u5E76\\u4E3A\\u4E00\\u4E2A useReducer 2. \\u5728\\u901A\\u7528\\u7684 Field \\u7EC4\\u4EF6\\u4E2D\\uFF0C\\u6539\\u7528 reducer \\u7684 dispatch \\u66F4\\u65B0\\u72B6\\u6001 3. \\u8FD9\\u65F6\\u5019\\u5728\\u4E1A\\u52A1\\u7EC4\\u4EF6\\u4E2D\\uFF0C\\u9700\\u8981\\u5411 Field \\u7EC4\\u4EF6\\u4F20\\u5165\\u7684\\u53C2\\u6570\\u53D8\\u591A\\u4E86\\uFF0C\\u4F46\\u6211\\u4EEC\\u6709\\u529E\\u6CD5\\u5C06\\u8FD9\\u4E9B\\u91CD\\u590D\\u7684\\u64CD\\u4F5C\\u79FB\\u9664\"), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"<Form />\"), \", with Context\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\" 17:34 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"17:34\": true,\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 7:34 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"7:34\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-2.jsx\\\" 37:48 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-2.jsx\\\"\",\n    \"37:48\": true,\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst Field = ({ store, dispatch, name, children }) => React.cloneElement(children, {\\n  value: store[name],\\n  onChange: (e) => dispatch({\\n    type: TYPES.CHANGE,\\n    name,\\n    value: e.target.value,\\n  })\\n})\\n\\nexport default ({ onSubmit }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <Field store={store} dispatch={dispatch} name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field store={store} dispatch={dispatch} name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 50:61 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"50:61\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"1. \\u5C06 reducer \\u79FB\\u81F3\\u65B0\\u7684\\u7236\\u7EA7\\u7EC4\\u4EF6 Form \\u4E2D\\uFF0C\\u5E76\\u901A\\u8FC7 Context \\u4F20\\u9012 2. \\u8FD9\\u6837\\u4E00\\u6765\\uFF0C\\u4E1A\\u52A1\\u4EE3\\u7801\\u4E2D\\u91CD\\u590D\\u4F20\\u9012\\u7684\\u5C5E\\u6027\\u5C31\\u88AB\\u79FB\\u9664\\u4E86\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Validator\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-1.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-1.jsx.pseudo\\\"\"\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-2.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-2.jsx.pseudo\\\"\"\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\" validate={someValidators}>\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\" validate={someValidators}>\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\" validate={someValidators}>\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-3.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-3.jsx.pseudo\\\"\"\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\" validate={someValidators}>\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\" validate={someValidators}>\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\" validate={someValidators}>\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n      { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-3.jsx.pseudo\\\" title=\\\"Where to get the errors?\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-3.jsx.pseudo\\\"\",\n    \"title\": \"\\\"Where\",\n    \"to\": true,\n    \"get\": true,\n    \"the\": true,\n    \"errors?\\\"\": true\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\" validate={someValidators}>\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\" validate={someValidators}>\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\" validate={someValidators}>\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n      { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n    </Form>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"1. \\u5047\\u60F3\\uFF0C\\u6211\\u4EEC\\u5728 Field \\u4E0A\\u6DFB\\u52A0\\u5C5E\\u6027 validate, \\u7528\\u4E8E\\u63D0\\u4F9B\\u6821\\u9A8C\\u89C4\\u5219 2. \\u7136\\u540E\\u5728\\u8868\\u5355\\u5E95\\u90E8\\u663E\\u793A\\u901A\\u7528\\u7EC4\\u4EF6\\u81EA\\u52A8\\u63A8\\u7B97\\u7684\\u6821\\u9A8C\\u7ED3\\u679C 3. \\u90A3\\u4E48\\u5728\\u4E1A\\u52A1\\u903B\\u8F91\\u4E2D\\u7A76\\u7ADF\\u8BE5\\u5982\\u4F55\\u83B7\\u53D6\\u6821\\u9A8C\\u7ED3\\u679C\\u5462\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Render Props\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-3.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-3.jsx.pseudo\\\"\"\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\" validate={someValidators}>\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\" validate={someValidators}>\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\" validate={someValidators}>\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n      { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-5.jsx.pseudo\\\" 4:6,17:19\",\n    \"file\": \"\\\"./src/snippets/field-3-5.jsx.pseudo\\\"\",\n    \"4:6,17:19\": true\n  }, \"export default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      {(form) => {\\n        const errors = form.getFieldErrors()\\n        return (<>\\n          <Field name=\\\"username\\\" validate={someValidators}>\\n            <input placeholder=\\\"username\\\" />\\n          </Field>\\n          <Field name=\\\"password\\\" validate={someValidators}>\\n            <input placeholder=\\\"password\\\" />\\n          </Field>\\n          <Field name=\\\"captcha\\\" validate={someValidators}>\\n            <input placeholder=\\\"captcha\\\" />\\n          </Field>\\n          <button>Submit</button>\\n          { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n        </>)\\n      }}\\n    </Form>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"\\u65E2\\u7136\\u8868\\u5355\\u6570\\u636E\\u5728 Form \\u7684 Context \\u4E2D\\uFF0C\\u90A3\\u81EA\\u7136\\u7531 Form \\u63D0\\u4F9B\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 10:22 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"10:22\": true,\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-4.jsx\\\" 23:50 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-4.jsx\\\"\",\n    \"23:50\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\nimport assert from 'assert'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst validators = {\\n  username: [\\n    (value) => assert(value, '\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D'),\\n  ],\\n  password: [\\n    (value) => assert(value && value.length >= 6, '\\u5BC6\\u7801\\u5FC5\\u987B\\u5927\\u4E8E\\u516D\\u4F4D\\u6570'),\\n  ],\\n  captcha: [\\n    (value) => assert(value && value.length === 4, '\\u9A8C\\u8BC1\\u7801\\u4E3A\\u56DB\\u4F4D\\u6570'),\\n  ],\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.ERROR: {\\n        return {\\n          ...state,\\n          errors: {\\n            ...state.errors,\\n            [action.name]: action.error,\\n          },\\n        } \\n      }\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          values: {\\n            ...state.values,\\n            [action.name]: action.value,\\n          },\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {\\n    errors: {},\\n    values: {},\\n  })\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store.values)\\n  }\\n\\n  const wrapper = children({\\n    getFieldErrors () {\\n      return Object.values(store.errors).filter(Boolean)\\n    },\\n  })\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {wrapper}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, validate, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => {\\n      const value = e.target.value\\n      try {\\n        validate.forEach((fn) => fn(value))\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error: null,\\n        })\\n      } catch (error) {\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error,\\n        })\\n      }\\n      dispatch({\\n        type: TYPES.CHANGE,\\n        name,\\n        value,\\n      })\\n    }\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      {(form) => {\\n        const errors = form.getFieldErrors()\\n        return (\\n          <React.Fragment>\\n            <Field name=\\\"username\\\" validate={validators.username}>\\n              <input placeholder=\\\"username\\\" />\\n            </Field>\\n            <Field name=\\\"password\\\" validate={validators.password}>\\n              <input placeholder=\\\"password\\\" />\\n            </Field>\\n            <Field name=\\\"captcha\\\" validate={validators.captcha}>\\n              <input placeholder=\\\"captcha\\\" />\\n            </Field>\\n            <button>Submit</button>\\n            { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n          </React.Fragment>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 36:46 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"36:46\": true,\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-4.jsx\\\" 70:97 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-4.jsx\\\"\",\n    \"70:97\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\nimport assert from 'assert'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst validators = {\\n  username: [\\n    (value) => assert(value, '\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D'),\\n  ],\\n  password: [\\n    (value) => assert(value && value.length >= 6, '\\u5BC6\\u7801\\u5FC5\\u987B\\u5927\\u4E8E\\u516D\\u4F4D\\u6570'),\\n  ],\\n  captcha: [\\n    (value) => assert(value && value.length === 4, '\\u9A8C\\u8BC1\\u7801\\u4E3A\\u56DB\\u4F4D\\u6570'),\\n  ],\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.ERROR: {\\n        return {\\n          ...state,\\n          errors: {\\n            ...state.errors,\\n            [action.name]: action.error,\\n          },\\n        } \\n      }\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          values: {\\n            ...state.values,\\n            [action.name]: action.value,\\n          },\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {\\n    errors: {},\\n    values: {},\\n  })\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store.values)\\n  }\\n\\n  const wrapper = children({\\n    getFieldErrors () {\\n      return Object.values(store.errors).filter(Boolean)\\n    },\\n  })\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {wrapper}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, validate, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => {\\n      const value = e.target.value\\n      try {\\n        validate.forEach((fn) => fn(value))\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error: null,\\n        })\\n      } catch (error) {\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error,\\n        })\\n      }\\n      dispatch({\\n        type: TYPES.CHANGE,\\n        name,\\n        value,\\n      })\\n    }\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      {(form) => {\\n        const errors = form.getFieldErrors()\\n        return (\\n          <React.Fragment>\\n            <Field name=\\\"username\\\" validate={validators.username}>\\n              <input placeholder=\\\"username\\\" />\\n            </Field>\\n            <Field name=\\\"password\\\" validate={validators.password}>\\n              <input placeholder=\\\"password\\\" />\\n            </Field>\\n            <Field name=\\\"captcha\\\" validate={validators.captcha}>\\n              <input placeholder=\\\"captcha\\\" />\\n            </Field>\\n            <button>Submit</button>\\n            { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n          </React.Fragment>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"6\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 6 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-4.jsx\\\" 8:18 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-4.jsx\\\"\",\n    \"8:18\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\nimport assert from 'assert'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst validators = {\\n  username: [\\n    (value) => assert(value, '\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D'),\\n  ],\\n  password: [\\n    (value) => assert(value && value.length >= 6, '\\u5BC6\\u7801\\u5FC5\\u987B\\u5927\\u4E8E\\u516D\\u4F4D\\u6570'),\\n  ],\\n  captcha: [\\n    (value) => assert(value && value.length === 4, '\\u9A8C\\u8BC1\\u7801\\u4E3A\\u56DB\\u4F4D\\u6570'),\\n  ],\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.ERROR: {\\n        return {\\n          ...state,\\n          errors: {\\n            ...state.errors,\\n            [action.name]: action.error,\\n          },\\n        } \\n      }\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          values: {\\n            ...state.values,\\n            [action.name]: action.value,\\n          },\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {\\n    errors: {},\\n    values: {},\\n  })\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store.values)\\n  }\\n\\n  const wrapper = children({\\n    getFieldErrors () {\\n      return Object.values(store.errors).filter(Boolean)\\n    },\\n  })\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {wrapper}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, validate, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => {\\n      const value = e.target.value\\n      try {\\n        validate.forEach((fn) => fn(value))\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error: null,\\n        })\\n      } catch (error) {\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error,\\n        })\\n      }\\n      dispatch({\\n        type: TYPES.CHANGE,\\n        name,\\n        value,\\n      })\\n    }\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      {(form) => {\\n        const errors = form.getFieldErrors()\\n        return (\\n          <React.Fragment>\\n            <Field name=\\\"username\\\" validate={validators.username}>\\n              <input placeholder=\\\"username\\\" />\\n            </Field>\\n            <Field name=\\\"password\\\" validate={validators.password}>\\n              <input placeholder=\\\"password\\\" />\\n            </Field>\\n            <Field name=\\\"captcha\\\" validate={validators.captcha}>\\n              <input placeholder=\\\"captcha\\\" />\\n            </Field>\\n            <button>Submit</button>\\n            { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n          </React.Fragment>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-2-3.jsx\\\" 49:62 title=\\\"Before\\\"\",\n    \"file\": \"\\\"./src/snippets/field-2-3.jsx\\\"\",\n    \"49:62\": true,\n    \"title\": \"\\\"Before\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          [action.name]: action.value,\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {})\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store)\\n  }\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {children}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => dispatch({\\n      type: TYPES.CHANGE,\\n      name,\\n      value: e.target.value,\\n    })\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      <Field name=\\\"username\\\">\\n        <input placeholder=\\\"username\\\" />\\n      </Field>\\n      <Field name=\\\"password\\\">\\n        <input placeholder=\\\"password\\\" />\\n      </Field>\\n      <Field name=\\\"captcha\\\">\\n        <input placeholder=\\\"captcha\\\" />\\n      </Field>\\n      <button>Submit</button>\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/field-3-4.jsx\\\" 100:121 title=\\\"After\\\"\",\n    \"file\": \"\\\"./src/snippets/field-3-4.jsx\\\"\",\n    \"100:121\": true,\n    \"title\": \"\\\"After\\\"\"\n  }, \"import React, { useContext, useReducer } from 'react'\\nimport assert from 'assert'\\n\\nconst TYPES = {\\n  CHANGE: 'CHANGE',\\n}\\n\\nconst validators = {\\n  username: [\\n    (value) => assert(value, '\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D'),\\n  ],\\n  password: [\\n    (value) => assert(value && value.length >= 6, '\\u5BC6\\u7801\\u5FC5\\u987B\\u5927\\u4E8E\\u516D\\u4F4D\\u6570'),\\n  ],\\n  captcha: [\\n    (value) => assert(value && value.length === 4, '\\u9A8C\\u8BC1\\u7801\\u4E3A\\u56DB\\u4F4D\\u6570'),\\n  ],\\n}\\n\\nconst FormContext = React.createContext({})\\n\\nconst Form = ({ onSubmit, children }) => {\\n  const [store, dispatch] = useReducer((state, action) => {\\n    switch (action.type) {\\n      case TYPES.ERROR: {\\n        return {\\n          ...state,\\n          errors: {\\n            ...state.errors,\\n            [action.name]: action.error,\\n          },\\n        } \\n      }\\n      case TYPES.CHANGE: {\\n        return {\\n          ...state,\\n          values: {\\n            ...state.values,\\n            [action.name]: action.value,\\n          },\\n        } \\n      }\\n      default: {\\n        return state\\n      }\\n    }\\n  }, {\\n    errors: {},\\n    values: {},\\n  })\\n\\n  const handleSubmit = (event) => {\\n    event.preventDefault()\\n    onSubmit(store.values)\\n  }\\n\\n  const wrapper = children({\\n    getFieldErrors () {\\n      return Object.values(store.errors).filter(Boolean)\\n    },\\n  })\\n\\n  return <form onSubmit={handleSubmit}>\\n    <FormContext.Provider value={[store, dispatch]}>\\n      {wrapper}\\n    </FormContext.Provider>\\n  </form>\\n}\\n\\nconst Field = ({ name, validate, children }) => {\\n  const [store, dispatch] = useContext(FormContext)\\n  return React.cloneElement(children, {\\n    value: store[name],\\n    onChange: (e) => {\\n      const value = e.target.value\\n      try {\\n        validate.forEach((fn) => fn(value))\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error: null,\\n        })\\n      } catch (error) {\\n        dispatch({\\n          type: TYPES.ERROR,\\n          name,\\n          error,\\n        })\\n      }\\n      dispatch({\\n        type: TYPES.CHANGE,\\n        name,\\n        value,\\n      })\\n    }\\n  })\\n}\\n\\nexport default ({ onSubmit }) => {\\n  return (\\n    <Form onSubmit={onSubmit}>\\n      {(form) => {\\n        const errors = form.getFieldErrors()\\n        return (\\n          <React.Fragment>\\n            <Field name=\\\"username\\\" validate={validators.username}>\\n              <input placeholder=\\\"username\\\" />\\n            </Field>\\n            <Field name=\\\"password\\\" validate={validators.password}>\\n              <input placeholder=\\\"password\\\" />\\n            </Field>\\n            <Field name=\\\"captcha\\\" validate={validators.captcha}>\\n              <input placeholder=\\\"captcha\\\" />\\n            </Field>\\n            <button>Submit</button>\\n            { errors.length > 0 ? <p className=\\\"error\\\">{errors[0].message}</p> : null }\\n          </React.Fragment>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\")))), mdx(\"hr\", null), mdx(DefaultPreviewer, {\n    name: \"field-3-4\",\n    mdxType: \"DefaultPreviewer\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"rc-field-form\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/rc-field-form\"\n  }, \"@NPM\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/react-component/field-form\"\n  }, \"@GitHub\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2714 Two-way data binding\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2714 Transformer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2714 Validator (Sync & Async)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2714 Builtin Rules\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2714 UILess, Compatible with Custom Component\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    columns: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(SearchPreviewer, {\n    name: \"search-3-1\",\n    mdxType: \"SearchPreviewer\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/search-3-1.jsx\\\"\",\n    \"file\": \"\\\"./src/snippets/search-3-1.jsx\\\"\"\n  }, \"import React from 'react'\\nimport Form, { Field } from 'rc-field-form'\\n\\nconst normalize = v => v.trim()\\nconst rules = [\\n  { required: true },\\n  {\\n    /**\\u8BC6\\u522B\\u8F93\\u5165\\u7684\\u5B57\\u7B26\\u4E32\\u4E3A AppID \\u6216\\u96C6\\u7FA4 ID */\\n    validator(_, value) {\\n      if (!value || /^(\\\\d+$|cls-)/.test(value)) {\\n        return Promise.resolve()\\n      }\\n      return Promise.reject(new Error('\\u8F93\\u5165\\u6709\\u8BEF\\uFF0C\\u8BF7\\u8F93\\u5165\\u4EE5 cls- \\u5F00\\u5934\\u7684\\u96C6\\u7FA4 ID \\u6216\\u6570\\u5B57\\u7C7B\\u578B\\u7684 AppID'))\\n    }\\n  }\\n]\\n\\nconst Search = ({ onSearch }) => {\\n  const handleFinish = ({ keyword }) => onSearch({ keyword })\\n  return (\\n    <Form onFinish={handleFinish}>\\n      {(_, form) => {\\n        const keywordErrors = form.getFieldError('keyword')\\n        return (\\n          <React.Fragment>\\n            <Field name=\\\"keyword\\\" rules={rules} normalize={normalize}>\\n              <input placeholder=\\\"\\u8BF7\\u8F93\\u5165\\u7528\\u6237 AppID \\u6216\\u96C6\\u7FA4 ID \\u67E5\\u8BE2\\\" />\\n            </Field>\\n            {keywordErrors[0] ? <p className=\\\"error\\\">{keywordErrors[0]}</p> : null}\\n          </React.Fragment>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\\nexport default Search\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Integrate with Tea\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/tea-form.jsx.pseudo\\\" 1:24\",\n    \"file\": \"\\\"./src/snippets/tea-form.jsx.pseudo\\\"\",\n    \"1:24\": true\n  }, \"import * as React from 'react'\\nimport { default as RCForm, Field as RCField } from 'rc-field-form'\\nimport { Form as TeaForm, Modal as TeaModal } from '@tencent/tea-component'\\n\\nconst MESSAGES = {\\n  required: '${label}\\u4E0D\\u80FD\\u4E3A\\u7A7A',\\n  types: {\\n    number: '${label}\\u5E94\\u4E3A\\u6570\\u503C'\\n  }\\n}\\n\\nconst Form = ({ ...props }) => <RCForm validateMessages={MESSAGES} {...props} />\\n\\n/** \\u4FDD\\u6301\\u7EDF\\u4E00\\u7684\\u6837\\u5F0F\\u98CE\\u683C */\\nForm.Body = TeaForm\\nForm.Action = TeaModal.Footer\\n\\nexport default Form\\n\\nexport const useInitialValues = (form, initialValues, dependencies = [initialValues]) => {\\n  React.useEffect(() => {\\n    form.setFieldsValue(initialValues)\\n  }, dependencies)\\n}\\n\\n// ...\\n\\nconst requiredRule = { required: true, validateTrigger: 'onSubmit' }\\n\\nconst Field = ({\\n  name,\\n  label,\\n  required = false,\\n  errors = [],\\n  rules = [],\\n  children,\\n  dependencies = [],\\n  messageVariables = {},\\n  teaProps = {},\\n  rcProps = {}\\n}) => {\\n  return (\\n    <TeaForm.Item\\n      label={label}\\n      required={required}\\n      message={errors[0]}\\n      status={errors.length ? 'error' : null}\\n      align=\\\"middle\\\"\\n      {...teaProps}\\n    >\\n      <RCField\\n        name={name}\\n        rules={required ? [requiredRule, ...rules] : rules}\\n        dependencies={dependencies}\\n        messageVariables={{ label, ...messageVariables }}\\n        {...rcProps}\\n      >\\n        {children}\\n      </RCField>\\n    </TeaForm.Item>\\n  )\\n}\\n\\nexport default Field\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/tea-form.jsx.pseudo\\\" 28:64\",\n    \"file\": \"\\\"./src/snippets/tea-form.jsx.pseudo\\\"\",\n    \"28:64\": true\n  }, \"import * as React from 'react'\\nimport { default as RCForm, Field as RCField } from 'rc-field-form'\\nimport { Form as TeaForm, Modal as TeaModal } from '@tencent/tea-component'\\n\\nconst MESSAGES = {\\n  required: '${label}\\u4E0D\\u80FD\\u4E3A\\u7A7A',\\n  types: {\\n    number: '${label}\\u5E94\\u4E3A\\u6570\\u503C'\\n  }\\n}\\n\\nconst Form = ({ ...props }) => <RCForm validateMessages={MESSAGES} {...props} />\\n\\n/** \\u4FDD\\u6301\\u7EDF\\u4E00\\u7684\\u6837\\u5F0F\\u98CE\\u683C */\\nForm.Body = TeaForm\\nForm.Action = TeaModal.Footer\\n\\nexport default Form\\n\\nexport const useInitialValues = (form, initialValues, dependencies = [initialValues]) => {\\n  React.useEffect(() => {\\n    form.setFieldsValue(initialValues)\\n  }, dependencies)\\n}\\n\\n// ...\\n\\nconst requiredRule = { required: true, validateTrigger: 'onSubmit' }\\n\\nconst Field = ({\\n  name,\\n  label,\\n  required = false,\\n  errors = [],\\n  rules = [],\\n  children,\\n  dependencies = [],\\n  messageVariables = {},\\n  teaProps = {},\\n  rcProps = {}\\n}) => {\\n  return (\\n    <TeaForm.Item\\n      label={label}\\n      required={required}\\n      message={errors[0]}\\n      status={errors.length ? 'error' : null}\\n      align=\\\"middle\\\"\\n      {...teaProps}\\n    >\\n      <RCField\\n        name={name}\\n        rules={required ? [requiredRule, ...rules] : rules}\\n        dependencies={dependencies}\\n        messageVariables={{ label, ...messageVariables }}\\n        {...rcProps}\\n      >\\n        {children}\\n      </RCField>\\n    </TeaForm.Item>\\n  )\\n}\\n\\nexport default Field\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/example-1-1.jsx.pseudo\\\" 4\",\n    \"file\": \"\\\"./src/snippets/example-1-1.jsx.pseudo\\\"\"\n  }, \"import * as React from 'react'\\nimport { Button, Input, Select } from '@tencent/tea-component'\\nimport ErrorsAlert from '@common/components/ErrorsAlert'\\nimport { Form, Field } from '@common/components/Form'\\nimport { ARGUMENT_CONTEXTS } from './constants'\\n\\nexport const ArgumentForm = ({ onFinish, submitting, errors }) => {\\n  return (\\n    <Form onFinish={onFinish}>\\n      {(_, form) => {\\n        return (\\n          <>\\n            <Form.Body>\\n              <Field name=\\\"context\\\" label=\\\"\\u7EC4\\u4EF6\\u540D\\\" required errors={form.getFieldError('context')}>\\n                <Select type=\\\"simulate\\\" appearence=\\\"button\\\" options={ARGUMENT_CONTEXTS} />\\n              </Field>\\n              <Field name=\\\"name\\\" label=\\\"\\u53C2\\u6570\\u540D\\\" required errors={form.getFieldError('name')}>\\n                <Input placeholder=\\\"register-with-taints\\\" />\\n              </Field>\\n            </Form.Body>\\n            <Form.Action>\\n              <ErrorsAlert errors={errors} />\\n              <Button type=\\\"primary\\\" loading={submitting}>\\n                \\u786E\\u5B9A\\n              </Button>\\n            </Form.Action>\\n          </>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/example-1-1.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/example-1-1.jsx.pseudo\\\"\"\n  }, \"import * as React from 'react'\\nimport { Button, Input, Select } from '@tencent/tea-component'\\nimport ErrorsAlert from '@common/components/ErrorsAlert'\\nimport { Form, Field } from '@common/components/Form'\\nimport { ARGUMENT_CONTEXTS } from './constants'\\n\\nexport const ArgumentForm = ({ onFinish, submitting, errors }) => {\\n  return (\\n    <Form onFinish={onFinish}>\\n      {(_, form) => {\\n        return (\\n          <>\\n            <Form.Body>\\n              <Field name=\\\"context\\\" label=\\\"\\u7EC4\\u4EF6\\u540D\\\" required errors={form.getFieldError('context')}>\\n                <Select type=\\\"simulate\\\" appearence=\\\"button\\\" options={ARGUMENT_CONTEXTS} />\\n              </Field>\\n              <Field name=\\\"name\\\" label=\\\"\\u53C2\\u6570\\u540D\\\" required errors={form.getFieldError('name')}>\\n                <Input placeholder=\\\"register-with-taints\\\" />\\n              </Field>\\n            </Form.Body>\\n            <Form.Action>\\n              <ErrorsAlert errors={errors} />\\n              <Button type=\\\"primary\\\" loading={submitting}>\\n                \\u786E\\u5B9A\\n              </Button>\\n            </Form.Action>\\n          </>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/example-1-2.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/example-1-2.jsx.pseudo\\\"\"\n  }, \"import * as React from 'react'\\nimport { Button, Input, Select } from '@tencent/tea-component'\\nimport ErrorsAlert from '@common/components/ErrorsAlert'\\nimport { Form, Field } from '@common/components/Form'\\nimport { ARGUMENT_CONTEXTS } from './constants'\\nimport { useViewContext } from './context'\\n\\nexport const ArgumentForm = ({ onFinish, submitting, errors }) => {\\n  const { args } = useViewContext()\\n  const isDuplicated = ({ getFieldValue }) => ({\\n    async validator(_, name) {\\n      const context = getFieldValue('context')\\n      if (~args.findIndex(item => item.context === context && item.name === name)) {\\n        return Promise.reject(new Error('\\u53C2\\u6570\\u5DF2\\u5B58\\u5728'))\\n      }\\n      return Promise.resolve()\\n    }\\n  })\\n  return (\\n    <Form onFinish={onFinish}>\\n      {(_, form) => {\\n        return (\\n          <>\\n            <Form.Body>\\n              <Field name=\\\"context\\\" label=\\\"\\u7EC4\\u4EF6\\u540D\\\" required errors={form.getFieldError('context')}>\\n                <Select type=\\\"simulate\\\" appearence=\\\"button\\\" options={ARGUMENT_CONTEXTS} />\\n              </Field>\\n              <Field\\n                name=\\\"name\\\"\\n                label=\\\"\\u53C2\\u6570\\u540D\\\"\\n                required\\n                errors={form.getFieldError('name')}\\n                dependencies={['context']}\\n                rules={[isDuplicated]}\\n              >\\n                <Input placeholder=\\\"register-with-taints\\\" />\\n              </Field>\\n            </Form.Body>\\n            <Form.Action>\\n              <ErrorsAlert errors={errors} />\\n              <Button type=\\\"primary\\\" loading={submitting}>\\n                \\u786E\\u5B9A\\n              </Button>\\n            </Form.Action>\\n          </>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=\\\"./src/snippets/example-1-2.jsx.pseudo\\\"\",\n    \"file\": \"\\\"./src/snippets/example-1-2.jsx.pseudo\\\"\"\n  }, \"import * as React from 'react'\\nimport { Button, Input, Select } from '@tencent/tea-component'\\nimport ErrorsAlert from '@common/components/ErrorsAlert'\\nimport { Form, Field } from '@common/components/Form'\\nimport { ARGUMENT_CONTEXTS } from './constants'\\nimport { useViewContext } from './context'\\n\\nexport const ArgumentForm = ({ onFinish, submitting, errors }) => {\\n  const { args } = useViewContext()\\n  const isDuplicated = ({ getFieldValue }) => ({\\n    async validator(_, name) {\\n      const context = getFieldValue('context')\\n      if (~args.findIndex(item => item.context === context && item.name === name)) {\\n        return Promise.reject(new Error('\\u53C2\\u6570\\u5DF2\\u5B58\\u5728'))\\n      }\\n      return Promise.resolve()\\n    }\\n  })\\n  return (\\n    <Form onFinish={onFinish}>\\n      {(_, form) => {\\n        return (\\n          <>\\n            <Form.Body>\\n              <Field name=\\\"context\\\" label=\\\"\\u7EC4\\u4EF6\\u540D\\\" required errors={form.getFieldError('context')}>\\n                <Select type=\\\"simulate\\\" appearence=\\\"button\\\" options={ARGUMENT_CONTEXTS} />\\n              </Field>\\n              <Field\\n                name=\\\"name\\\"\\n                label=\\\"\\u53C2\\u6570\\u540D\\\"\\n                required\\n                errors={form.getFieldError('name')}\\n                dependencies={['context']}\\n                rules={[isDuplicated]}\\n              >\\n                <Input placeholder=\\\"register-with-taints\\\" />\\n              </Field>\\n            </Form.Body>\\n            <Form.Action>\\n              <ErrorsAlert errors={errors} />\\n              <Button type=\\\"primary\\\" loading={submitting}>\\n                \\u786E\\u5B9A\\n              </Button>\\n            </Form.Action>\\n          </>\\n        )\\n      }}\\n    </Form>\\n  )\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Summary\"), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cloneElement\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Context API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"del\", {\n    parentName: \"li\"\n  }, \"HOC\"), \" Render Props\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hooks\")), mdx(\"hr\", null), mdx(\"h2\", null, \"cohesive\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"separation of concerns is not equal to separation of file types\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vuejs.org/v2/guide/single-file-components.html\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"\\u300CVue.js - What About Separation of Concerns?\\u300D\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"\\u4E00\\u4E2A\\u91CD\\u8981\\u7684\\u4E8B\\u60C5\\u503C\\u5F97\\u6CE8\\u610F\\uFF0C\\u5173\\u6CE8\\u70B9\\u5206\\u79BB\\u4E0D\\u7B49\\u4E8E\\u6587\\u4EF6\\u7C7B\\u578B\\u5206\\u79BB\\u3002 \\u5728\\u73B0\\u4EE3 UI \\u5F00\\u53D1\\u4E2D\\uFF0C\\u6211\\u4EEC\\u5DF2\\u7ECF\\u53D1\\u73B0\\u76F8\\u6BD4\\u4E8E\\u628A\\u4EE3\\u7801\\u5E93\\u5206\\u79BB\\u6210\\u4E09\\u4E2A\\u5927\\u7684\\u5C42\\u6B21\\u5E76\\u5C06\\u5176\\u76F8\\u4E92\\u4EA4\\u7EC7\\u8D77\\u6765\\uFF0C\\u628A\\u5B83\\u4EEC\\u5212\\u5206\\u4E3A\\u677E\\u6563\\u8026\\u5408\\u7684\\u7EC4\\u4EF6\\u518D\\u5C06\\u5176\\u7EC4\\u5408\\u8D77\\u6765\\u66F4\\u5408\\u7406\\u4E00\\u4E9B\\u3002\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u91CC\\uFF0C\\u5176\\u6A21\\u677F\\u3001\\u903B\\u8F91\\u548C\\u6837\\u5F0F\\u662F\\u5185\\u90E8\\u8026\\u5408\\u7684\\uFF0C\\u5E76\\u4E14\\u628A\\u4ED6\\u4EEC\\u642D\\u914D\\u5728\\u4E00\\u8D77\\u5B9E\\u9645\\u4E0A\\u4F7F\\u5F97\\u7EC4\\u4EF6\\u66F4\\u52A0\\u5185\\u805A\\u4E14\\u66F4\\u53EF\\u7EF4\\u62A4\\u3002 -- \\u600E\\u4E48\\u770B\\u5F85\\u5173\\u6CE8\\u70B9\\u5206\\u79BB\\uFF1F\", mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u73B0\\u5B58\\u95EE\\u9898\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The relationship of Redux - Global\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u73B0\\u6709\\u8868\\u5355\\u4F7F\\u7528 Redux \\u7BA1\\u7406\\u5B58\\u5728\\u7F3A\\u9677:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u94FE\\u8DEF\\u5197\\u957F\\uFF0C\\u4E0D\\u4FBF\\u5F00\\u53D1\\u548C\\u7EF4\\u62A4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u8868\\u5355\\u72B6\\u6001\\u4E3A\\u5355\\u4F8B\\uFF0C\\u5FC5\\u7136\\u65E0\\u6CD5\\u6EE1\\u8DB3\\u5D4C\\u5957\\u8DEF\\u5F84\\u7684\\u586B\\u8868\\u573A\\u666F\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F18\\u52BF\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6EE1\\u8DB3\\u8DE8\\u9875\\u9762\\u5171\\u4EAB\\u72B6\\u6001\\u7684\\u573A\\u666F\\uFF0C\\u4F46\\u5B9E\\u9645\\u5E76\\u4E0D\\u5B58\\u5728\"))))))), mdx(\"hr\", null), mdx(\"h1\", null, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }, \"React - Context\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/react-api.html#createelement\"\n  }, \"React - createElement()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/render-props.html\"\n  }, \"React - Render Props\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://vuejs.org/v2/guide/single-file-components.html\"\n  }, \"Vue.js - What About Separation of Concerns?\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/react-component/field-form\"\n  }, \"rc-field-form\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/react-component/form\"\n  }, \"react-component/form\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://unform.dev/\"\n  }, \"unform\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/moubi/enform\"\n  }, \"enform\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jaredpalmer.com/formik/\"\n  }, \"formik\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Q&A\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9dd24c21-63ac-51d2-90b2-ca95f91ab10b","slug":"/2020-04-17-design-a-neat-form","title":"Design a neat <Form />"}},"staticQueryHashes":[]}